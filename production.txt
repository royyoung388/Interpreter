program -> statements
statements -> statement statements
statements -> $

statement -> break ;
statement -> return ;
statement -> declare_stm ;
statement -> assign_stm ;
statement -> while_stm
statement -> do_stm
statement -> for_stm
statement -> if_stm
statement -> switch_stm

value -> INT
value -> REAL
value -> CHAR
value -> STRING

arithmetic_exp -> arithmetic_item item_op arithmetic_alt
arithmetic_alt -> $
arithmetic_alt -> BIN_AR_OP_2 arithmetic_item arithmetic_alt
item_op -> BIN_AR_OP_1 arithmetic_item
item_op -> $
arithmetic_item -> ( arithmetic_exp )
arithmetic_item -> ID
arithmetic_item -> value

logic_exp -> arithmetic_exp logic_ari
logic_ari -> $
logic_ari -> RELATION_OP arithmetic_exp
logic_exp -> BOOL logic_bool
logic_bool -> $
logic_bool -> RELATION_OP logic_exp

declare_stm -> TYPE declare_ass
declare_ass -> ID declare_val declare_item
declare_item -> $
declare_item -> , declare_val declare_item
declare_val -> $
declare_val -> ASS_OP arithmetic_exp
declare_val -> [ INT ] ASS_OP declare_arr
declare_arr -> { value arr_item }
arr_item -> $
arr_item -> , value arr_item

assign_stm -> SELF_OP ID
assign_stm -> ID assign_item
assign_item -> ASS_OP arithmetic_exp
assign_item -> SELF_OP
assign_item -> [ INT ] ASS_OP arithmetic_exp

while_stm -> while ( logic_exp ) { statements }
do_stm -> do { statements } while ( logic_exp ) ;
for_stm -> for ( declare_stm ; logic_exp ; assign_stm ) { statements }
if_stm -> if ( logic_exp ) { statements } else_stm
else_stm -> $
else_stm -> else else_if
else_if -> if_stm
else_if -> { statements }