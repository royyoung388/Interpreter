program -> func funcs
funcs -> $
funcs -> func funcs
func -> TYPE ID ( args ) func_body
args -> TYPE ID arg
args -> $
arg -> , TYPE ID arg
arg -> $
func_body -> ;
func_body -> { statements }

statements -> statement statements
statements -> $
statement -> break ;
statement -> return ;
statement -> read_stm ;
statement -> write_stm ;
statement -> declare_stm ;
statement -> assign_stm ;
statement -> while_stm
statement -> do_stm
statement -> for_stm
statement -> if_stm
statement -> switch_stm

read_stm -> read ( )

write_stm -> write ( write_val )
write_val -> value
write_val -> ID arr
arr -> [ INT ]
arr -> $

value -> INT
value -> REAL
value -> CHAR
value -> STRING

arithmetic_exp -> arithmetic_item arithmetic_term
arithmetic_term -> BIN_AR_OP_2 arithmetic_item arithmetic_term
arithmetic_term -> $
arithmetic_item -> arithmetic_fac arithmetic_t
arithmetic_t -> BIN_AR_OP_1 arithmetic_fac arithmetic_t
arithmetic_t -> $
arithmetic_fac -> ID
arithmetic_fac -> value
arithmetic_fac -> ( arithmetic_exp )

logic_exp -> logic_item logic_term
logic_term -> LOGIC_OP logic_item logic_term
logic_term -> $
// logic_item -> ( logic_item ) 加上不是 LL(1) 文法，因此不支持括号运算
logic_item -> UN_LOG_OP logic_item
logic_item -> BOOL
logic_item -> arithmetic_exp logic_ari
logic_ari -> RELATION_OP arithmetic_exp
logic_ari -> $

declare_stm -> TYPE ID declare_val declare_item
declare_item -> $
declare_item -> , ID declare_val declare_item
declare_val -> $
declare_val -> ASS_OP arithmetic_exp
declare_val -> [ INT ] ASS_OP declare_arr
declare_arr -> { value arr_item }
arr_item -> $
arr_item -> , value arr_item

assign_stm -> SELF_OP ID
assign_stm -> ID assign_item
assign_item -> ASS_OP assign_fac
assign_item -> SELF_OP
assign_item -> [ INT ] ASS_OP assign_fac
assign_fac -> arithmetic_exp
assign_fac -> read_stm

while_stm -> while ( logic_exp ) { statements }
do_stm -> do { statements } while ( logic_exp ) ;
for_stm -> for ( declare_stm ; logic_exp ; assign_stm ) { statements }
if_stm -> if ( logic_exp ) { statements } else_stm
else_stm -> $
else_stm -> else else_if
else_if -> if_stm
else_if -> { statements }