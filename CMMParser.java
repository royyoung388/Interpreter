/* Generated By:JavaCC: Do not edit this line. CMMParser.java */
package cc;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Scanner;

public class CMMParser implements CMMParserConstants {
    static SymbolTable table = new SymbolTable();
    public static void main(String args[]) throws ParseException {
        try {
            FileInputStream fileReader = new FileInputStream("testAnalyse.c");
            CMMParser parser = new CMMParser(fileReader);
            parser.procedure();
        }catch (Exception e){
            System.err.println(e);
        }
    }

  static final public void procedure() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      func();
    }
  }

  static final public void func() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(35);
    if (jj_2_3(3)) {
      type();
      jj_consume_token(IDENTIFIER);
      label_2:
      while (true) {
        if (jj_2_2(3)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(36);
        type();
        jj_consume_token(IDENTIFIER);
      }
    } else {
      ;
    }
    jj_consume_token(37);
    jj_consume_token(38);
    label_3:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_3;
      }
      statement();
    }
    jj_consume_token(39);
  }

  static final public String type() throws ParseException {
    if (jj_2_5(3)) {
      jj_consume_token(INT);
            {if (true) return Type.INT;}
    } else if (jj_2_6(3)) {
      jj_consume_token(REAL);
                {if (true) return Type.DOUBLE;}
    } else if (jj_2_7(3)) {
      jj_consume_token(VOID);
                {if (true) return Type.VOID;}
    } else if (jj_2_8(3)) {
      jj_consume_token(CHAR);
                {if (true) return Type.CHAR;}
    } else if (jj_2_9(3)) {
      jj_consume_token(STRING);
                  {if (true) return Category.STRING;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void statement() throws ParseException {
    if (jj_2_10(3)) {
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
    } else if (jj_2_11(3)) {
      jj_consume_token(RETURN);
      jj_consume_token(SEMI);
    } else if (jj_2_12(3)) {
      read_stm();
      jj_consume_token(SEMI);
    } else if (jj_2_13(3)) {
      write_stm();
      jj_consume_token(SEMI);
    } else if (jj_2_14(3)) {
      declare_stm();
      jj_consume_token(SEMI);
    } else if (jj_2_15(3)) {
      declare_arr_stm();
      jj_consume_token(SEMI);
    } else if (jj_2_16(3)) {
      assign_stm();
      jj_consume_token(SEMI);
    } else if (jj_2_17(3)) {
      while_stm();
    } else if (jj_2_18(3)) {
      do_stm();
    } else if (jj_2_19(3)) {
      for_stm();
    } else if (jj_2_20(3)) {
      if_stm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Value read_stm() throws ParseException {
    Value v = new Value();
    jj_consume_token(READ);
    jj_consume_token(35);
    jj_consume_token(37);
    Scanner in = new Scanner(System.in);
    v.cate = Category.STRING;
    v.value = in.nextLine();
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public void write_stm() throws ParseException {
    Token token = null;
    Token index = null;
    Value value = null;
    Symbol symbol = null;
    jj_consume_token(WRITE);
    jj_consume_token(35);
    if (jj_2_21(3)) {
      value = value();
                System.out.println(value.value);
    } else if (jj_2_22(3)) {
      token = jj_consume_token(IDENTIFIER);
                symbol = table.query(token.image);
                System.out.println(symbol.getLength() < 0 ? symbol.getValueString() : symbol.getArray());
    } else if (jj_2_23(3)) {
      token = jj_consume_token(IDENTIFIER);
      jj_consume_token(40);
      index = jj_consume_token(INTEGER_NUM);
      jj_consume_token(41);
                symbol = table.query(token.image);
                if (symbol.getLength() < 0) {
                    {if (true) throw new ParseException(String.format("%d,%d: \u93cd\u56ea\u7611\u7ed7\ufe3f\u7b09\u93c4\ue21b\u669f\u7f01\u52ed\u88ab\u9368\ufffd", token.beginLine, token.beginColumn));}
                } else {
                    System.out.println(symbol.getArray(Integer.parseInt(index.image)));
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(37);
  }

  static final public Value value() throws ParseException {
    Token token = null;
    Value value = new Value();
    if (jj_2_24(3)) {
      token = jj_consume_token(INTEGER_NUM);
                          value.cate = Category.INT;
    } else if (jj_2_25(3)) {
      token = jj_consume_token(REAL_NUM);
                        value.cate = Category.REAL;
    } else if (jj_2_26(3)) {
      token = jj_consume_token(CHAR_C);
                      value.cate = Category.CHAR;
    } else if (jj_2_27(3)) {
      token = jj_consume_token(STRING);
                      value.cate = Category.STRING;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        value.value = token.image;
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  static final public void declare_stm() throws ParseException {
    Token token = null;
    Token tk = null;
    Symbol symbol;
    String type;
    Value value = null;
    int len;
    ArrayList<Value> list = new ArrayList<Value>();
    Value v;
    type = type();
    token = jj_consume_token(IDENTIFIER);
    if (jj_2_28(3)) {
      jj_consume_token(ASS_OP);
      value = arithmetic_exp();
    } else {
      ;
    }
            if (table.query(token.image) != null) {
                {if (true) throw new ParseException(String.format("%d,%d: \u95b2\u5d85\ue632\u7039\u6c2b\u7b9f\u9428\u52ec\u7223\u7487\u55d9\ue0c1", token.beginLine, token.beginColumn));}
            } else {
                symbol = new Symbol(type, token.image);
                if (value != null)
                    symbol.setValue(value.value);
                table.insert(symbol);
            }
    label_4:
    while (true) {
      if (jj_2_29(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(36);
      token = jj_consume_token(IDENTIFIER);
      if (jj_2_30(3)) {
        jj_consume_token(ASS_OP);
        value = arithmetic_exp();
      } else {
        ;
      }
            if (table.query(token.image) != null) {
                {if (true) throw new ParseException(String.format("%d,%d: \u95b2\u5d85\ue632\u7039\u6c2b\u7b9f\u9428\u52ec\u7223\u7487\u55d9\ue0c1", token.beginLine, token.beginColumn));}
            } else {
                symbol = new Symbol(type, token.image);
                if (value != null)
                    symbol.setValue(value.value);
                table.insert(symbol);
            }
    }
  }

  static final public void declare_arr_stm() throws ParseException {
    Token token = null;
    Token tk = null;
    Symbol symbol;
    String type;
    Value value = null;
    int len;
    ArrayList<Value> list = new ArrayList<Value>();
    Value v;
    type = type();
    token = jj_consume_token(IDENTIFIER);
    jj_consume_token(40);
    tk = jj_consume_token(INTEGER_NUM);
                                                         len = Integer.parseInt(tk.image);
    jj_consume_token(41);
    if (jj_2_33(3)) {
      jj_consume_token(ASS_OP);
      jj_consume_token(38);
      if (jj_2_32(3)) {
        v = value();
                                 list.add(v);
        label_5:
        while (true) {
          if (jj_2_31(3)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(36);
          v = value();
                                                               list.add(v);
        }
      } else {
        ;
      }
      jj_consume_token(39);
    } else {
      ;
    }
            if (table.query(token.image) != null) {
                {if (true) throw new ParseException(String.format("%d,%d: \u95b2\u5d85\ue632\u7039\u6c2b\u7b9f\u9428\u52ec\u7223\u7487\u55d9\ue0c1", token.beginLine, token.beginColumn));}
            } else {
                symbol = new Symbol(type, token.image);
                if (list.size() >= 0) {
                    symbol.setLength(len);
                    for (int i = 0; i < list.size(); i++)
                        symbol.setArrayValue(i, list.get(i).value);
                }
                table.insert(symbol);
            }
    label_6:
    while (true) {
      if (jj_2_34(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(36);
      token = jj_consume_token(IDENTIFIER);
      jj_consume_token(40);
      tk = jj_consume_token(INTEGER_NUM);
                                                  len = Integer.parseInt(tk.image);
      jj_consume_token(41);
      if (jj_2_37(3)) {
        jj_consume_token(ASS_OP);
        jj_consume_token(38);
        if (jj_2_36(3)) {
          v = value();
                                 list.add(v);
          label_7:
          while (true) {
            if (jj_2_35(3)) {
              ;
            } else {
              break label_7;
            }
            jj_consume_token(36);
            v = value();
                                                               list.add(v);
          }
        } else {
          ;
        }
        jj_consume_token(39);
      } else {
        ;
      }
            if (table.query(token.image) != null) {
                {if (true) throw new ParseException(String.format("%d,%d: \u95b2\u5d85\ue632\u7039\u6c2b\u7b9f\u9428\u52ec\u7223\u7487\u55d9\ue0c1", token.beginLine, token.beginColumn));}
            } else {
                symbol = new Symbol(type, token.image);
                if (list.size() >= 0) {
                    symbol.setLength(len);
                    for (int i = 0; i < list.size(); i++)
                        symbol.setArrayValue(i, list.get(i).value);
                }
                table.insert(symbol);
            }
    }
  }

  static final public void assign_stm() throws ParseException {
    Token token = null;
    Token id = null;
    Token index = null;
    Symbol symbol;
    Value v;
    if (jj_2_42(3)) {
      token = jj_consume_token(SELF_OP);
      id = jj_consume_token(IDENTIFIER);
        symbol = table.query(id.image);
        if (symbol == null)
            {if (true) throw new ParseException(String.format("%d,%d: \u93c8\ue044\u757e\u6d94\u590c\u6b91\u93cd\u56ea\u7611\u7ed7\ufffd", id.beginLine, id.beginColumn));}

            switch(token.image) {
            case "++":
                symbol.selfAdd();
                break;
            case "--":
                symbol.selfMin();
                break;
            }
    } else if (jj_2_43(3)) {
      id = jj_consume_token(IDENTIFIER);
      token = jj_consume_token(SELF_OP);
        symbol = table.query(id.image);
        if (symbol == null)
            {if (true) throw new ParseException(String.format("%d,%d: \u93c8\ue044\u757e\u6d94\u590c\u6b91\u93cd\u56ea\u7611\u7ed7\ufffd", id.beginLine, id.beginColumn));}

            switch(token.image) {
            case "++":
                symbol.selfAdd();
                break;
            case "--":
                symbol.selfMin();
                break;
            }
    } else if (jj_2_44(3)) {
      id = jj_consume_token(IDENTIFIER);
      token = jj_consume_token(ASS_OP);
      if (jj_2_38(3)) {
        v = arithmetic_exp();
      } else if (jj_2_39(3)) {
        v = read_stm();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        symbol = table.query(id.image);
        if (symbol == null)
            {if (true) throw new ParseException(String.format("%d,%d: \u93c8\ue044\u757e\u6d94\u590c\u6b91\u93cd\u56ea\u7611\u7ed7\ufffd", id.beginLine, id.beginColumn));}

        symbol.setValue(v.value);
    } else if (jj_2_45(3)) {
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(40);
      index = jj_consume_token(INTEGER_NUM);
      jj_consume_token(41);
      token = jj_consume_token(ASS_OP);
      if (jj_2_40(3)) {
        v = arithmetic_exp();
      } else if (jj_2_41(3)) {
        v = read_stm();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        symbol = table.query(id.image);
        if (symbol == null)
            {if (true) throw new ParseException(String.format("%d,%d: \u93c8\ue044\u757e\u6d94\u590c\u6b91\u93cd\u56ea\u7611\u7ed7\ufffd", id.beginLine, id.beginColumn));}

        symbol.setArrayValue(Integer.parseInt(index.image), v.value);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void while_stm() throws ParseException {
    boolean logic;
    jj_consume_token(WHILE);
    jj_consume_token(35);
    logic = logic_exp();
    jj_consume_token(37);
    jj_consume_token(38);
    label_8:
    while (true) {
      if (jj_2_46(3)) {
        ;
      } else {
        break label_8;
      }
      statement();
    }
    jj_consume_token(39);

  }

  static final public void do_stm() throws ParseException {
    jj_consume_token(DO);
    jj_consume_token(38);
    label_9:
    while (true) {
      if (jj_2_47(3)) {
        ;
      } else {
        break label_9;
      }
      statement();
    }
    jj_consume_token(39);
    jj_consume_token(WHILE);
    jj_consume_token(35);
    logic_exp();
    jj_consume_token(37);
  }

  static final public void for_stm() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(35);
    declare_stm();
    jj_consume_token(SEMI);
    logic_exp();
    jj_consume_token(SEMI);
    assign_stm();
    jj_consume_token(37);
    jj_consume_token(38);
    label_10:
    while (true) {
      if (jj_2_48(3)) {
        ;
      } else {
        break label_10;
      }
      statement();
    }
    jj_consume_token(39);
  }

  static final public void if_stm() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(35);
    logic_exp();
    jj_consume_token(37);
    jj_consume_token(38);
    label_11:
    while (true) {
      if (jj_2_49(3)) {
        ;
      } else {
        break label_11;
      }
      statement();
    }
    jj_consume_token(39);
    label_12:
    while (true) {
      if (jj_2_50(3)) {
        ;
      } else {
        break label_12;
      }
      if (jj_2_53(3)) {
        jj_consume_token(ELSE);
        if (jj_2_51(3)) {
          if_stm();
        } else {
          ;
        }
      } else if (jj_2_54(3)) {
        jj_consume_token(38);
        label_13:
        while (true) {
          if (jj_2_52(3)) {
            ;
          } else {
            break label_13;
          }
          statement();
        }
        jj_consume_token(39);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public Value arithmetic_exp() throws ParseException {
    Value v1;
    Value v2 = null;
    Value v = new Value();
    Token token = null;
    v1 = arithmetic_item();
    label_14:
    while (true) {
      if (jj_2_55(3)) {
        ;
      } else {
        break label_14;
      }
      token = jj_consume_token(BIN_AR_OP_2);
      v2 = arithmetic_item();
    }
        if (v2 == null) {
            {if (true) return v1;}
        }
        if (!Utils.cateConvert(v1.cate, v2.cate)) {
            {if (true) throw new ParseException(String.format("%d,%d: \u7eeb\u8bf2\u7037\u6d93\u5d84\u7af4\u9477\ufffd", token.beginLine, token.beginColumn));}
        } else {
            v.cate = Utils.calcCate(v1.cate, v2.cate);
            switch(token.image) {
                case "+":
                    v.value = Double.toString(Double.parseDouble(v1.value) + Double.parseDouble(v2.value));
                    {if (true) return v;}
                case "-":
                    v.value = Double.toString(Double.parseDouble(v1.value) - Double.parseDouble(v2.value));
                    {if (true) return v;}
            }
            {if (true) return v1;}
        }
    throw new Error("Missing return statement in function");
  }

  static final public Value arithmetic_item() throws ParseException {
    Value v1;
    Value v2 = null;
    Value v = new Value();
    Token token = null;
    v1 = arithmetic_fac();
    label_15:
    while (true) {
      if (jj_2_56(3)) {
        ;
      } else {
        break label_15;
      }
      token = jj_consume_token(BIN_AR_OP_1);
      v2 = arithmetic_fac();
    }
        if (v2 == null) {
            {if (true) return v1;}
        }
        if (!Utils.cateConvert(v1.cate, v2.cate)) {
            {if (true) throw new ParseException(String.format("%d,%d: \u7eeb\u8bf2\u7037\u6d93\u5d84\u7af4\u9477\ufffd", token.beginLine, token.beginColumn));}
        } else {
            v.cate = Utils.calcCate(v1.cate, v2.cate);
            switch(token.image) {
                case "*":
                    v.value = Double.toString(Double.parseDouble(v1.value) * Double.parseDouble(v2.value));
                    {if (true) return v;}
                case "/":
                    v.value = Double.toString(Double.parseDouble(v1.value) / Double.parseDouble(v2.value));
                    {if (true) return v;}
                case "%":
                    v.value = Double.toString(Double.parseDouble(v1.value) % Double.parseDouble(v2.value));
                    {if (true) return v;}
            }
        }
        {if (true) return v1;}
    throw new Error("Missing return statement in function");
  }

  static final public Value arithmetic_fac() throws ParseException {
    Token token = null;
    Value value = null;
    if (jj_2_57(3)) {
      token = jj_consume_token(IDENTIFIER);
            Symbol symbol = table.query(token.image);
            if (symbol == null) {
                {if (true) throw new ParseException(String.format("%d,%d: \u93c8\ue044\u757e\u6d94\u590c\u6b91\u93cd\u56ea\u7611\u7ed7\ufffd", token.beginLine, token.beginColumn));}
            }
            value = new Value();
            value.cate = Utils.type2Cate(symbol.getType());
            value.value = symbol.getValueString();
            {if (true) return value;}
    } else if (jj_2_58(3)) {
      value = value();
            {if (true) return value;}
    } else if (jj_2_59(3)) {
      jj_consume_token(35);
      value = arithmetic_exp();
      jj_consume_token(37);
            {if (true) return value;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean logic_exp() throws ParseException {
    boolean v1;
    boolean v2 = false;
    Token token = null;
    v1 = logic_item();
    label_16:
    while (true) {
      if (jj_2_60(3)) {
        ;
      } else {
        break label_16;
      }
      token = jj_consume_token(LOGIC_OP);
      v2 = logic_item();
    }
        if (token == null)
            {if (true) return v1;}

        switch(token.image) {
            case "&&":
                {if (true) return v1 && v2;}
            case "||":
                {if (true) return v1 || v2;}
        }
        {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  static final public boolean logic_item() throws ParseException {
    boolean v;
    Token token = null;
    Value v1;
    Value v2 = null;
    if (jj_2_62(3)) {
      jj_consume_token(35);
      v = logic_item();
      jj_consume_token(37);
                            {if (true) return v;}
    } else if (jj_2_63(3)) {
      jj_consume_token(UN_LOG_OP);
      v = logic_item();
                                  {if (true) return !v;}
    } else if (jj_2_64(3)) {
      token = jj_consume_token(BOOL);
                    if (token.image.equals("true")) {if (true) return true;} else {if (true) return false;}
    } else if (jj_2_65(3)) {
      v1 = arithmetic_exp();
      label_17:
      while (true) {
        if (jj_2_61(3)) {
          ;
        } else {
          break label_17;
        }
        token = jj_consume_token(RELATION_OP);
        v2 = arithmetic_exp();
      }
            if (v2 == null) {
                {if (true) return Double.parseDouble(v1.value) > 0;}
            }

            switch(token.image) {
                case ">":
                    {if (true) return Double.parseDouble(v1.value) > Double.parseDouble(v2.value);}
                case "<":
                    {if (true) return Double.parseDouble(v1.value) < Double.parseDouble(v2.value);}
                case ">=":
                    {if (true) return Double.parseDouble(v1.value) >= Double.parseDouble(v2.value);}
                case "<=":
                    {if (true) return Double.parseDouble(v1.value) <= Double.parseDouble(v2.value);}
                case "==":
                    {if (true) return Double.parseDouble(v1.value) == Double.parseDouble(v2.value);}
                case "!=":
                    {if (true) return Double.parseDouble(v1.value) != Double.parseDouble(v2.value);}
            }

            {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_3_39() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(INTEGER_NUM)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(35)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(INTEGER_NUM)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASS_OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SELF_OP)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(RELATION_OP)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(SELF_OP)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(UN_LOG_OP)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(LOGIC_OP)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(ASS_OP)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(ASS_OP)) return true;
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(ASS_OP)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(ASS_OP)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(38)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(BIN_AR_OP_1)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(CHAR_C)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(REAL_NUM)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(INTEGER_NUM)) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(BIN_AR_OP_2)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMMParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[65];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMMParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMMParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMMParser(CMMParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 65; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
